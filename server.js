const express = require('express');
const http = require('http');
const socketIo = require('socket.io');
const path = require('path');

const app = express();
const server = http.createServer(app);

const io = socketIo(server, {
  cors: {
    origin: "*",
    methods: ["GET", "POST"]
  }
});

// Middleware
app.use(express.static('public'));
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ limit: '10mb', extended: true }));

// –•—Ä–∞–Ω–∏–ª–∏—â–∞
const users = new Map();
const waitingUsers = new Map();
const rooms = new Map();
const userSessions = new Map();

// –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ –†–æ—Å—Å–∏–∏
const popularCities = [
    '–ú–æ—Å–∫–≤–∞', '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫', '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥', '–ö–∞–∑–∞–Ω—å',
    '–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥', '–ß–µ–ª—è–±–∏–Ω—Å–∫', '–°–∞–º–∞—Ä–∞', '–û–º—Å–∫', '–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É',
    '–£—Ñ–∞', '–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫', '–í–æ—Ä–æ–Ω–µ–∂', '–ü–µ—Ä–º—å', '–í–æ–ª–≥–æ–≥—Ä–∞–¥',
    '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä', '–°–∞—Ä–∞—Ç–æ–≤', '–¢—é–º–µ–Ω—å', '–¢–æ–ª—å—è—Ç—Ç–∏', '–ò–∂–µ–≤—Å–∫',
    '–ë–∞—Ä–Ω–∞—É–ª', '–£–ª—å—è–Ω–æ–≤—Å–∫', '–ò—Ä–∫—É—Ç—Å–∫', '–•–∞–±–∞—Ä–æ–≤—Å–∫', '–Ø—Ä–æ—Å–ª–∞–≤–ª—å',
    '–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫', '–ú–∞—Ö–∞—á–∫–∞–ª–∞', '–¢–æ–º—Å–∫', '–û—Ä–µ–Ω–±—É—Ä–≥', '–ö–µ–º–µ—Ä–æ–≤–æ',
    '–î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥'
];

// –ù–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê –ù–ê–°–¢–†–û–ï–ù–ò–ô - 6 –≠–õ–ï–ú–ï–ù–¢–û–í
const moods = {
    'need_heard': { 
        name: '¬´–Ø —Ö–æ—á—É –ø–æ–¥–µ–ª–∏—Ç—å—Å—è ‚Äî –±–µ–∑ —Å–æ–≤–µ—Ç–æ–≤ –∏ –æ—Ü–µ–Ω–æ–∫¬ª', 
        emoji: 'üó£Ô∏è', 
        color: '#667eea',
        description: '–ü—Ä–æ—Å—Ç–æ –≤—ã—Å–ª—É—à–∞–π –º–µ–Ω—è, –Ω–µ –ø–µ—Ä–µ–±–∏–≤–∞—è'
    },
    'light_talk': { 
        name: '¬´–î–∞–≤–∞–π –ø–æ–≥–æ–≤–æ—Ä–∏–º –æ —á—ë–º-—Ç–æ —Å–≤–µ—Ç–ª–æ–º¬ª', 
        emoji: '‚òÄÔ∏è', 
        color: '#FFD93D',
        description: '–û —Ö–æ—Ä–æ—à–µ–º, –ª—ë–≥–∫–æ–º –∏ –ø—Ä–∏—è—Ç–Ω–æ–º'
    },
    'quiet_presence': { 
        name: '¬´–ú–Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–æ—Å—Ç–æ –∑–Ω–∞—Ç—å, —á—Ç–æ —Ç—ã —Ä—è–¥–æ–º¬ª', 
        emoji: 'üåô', 
        color: '#95A5A6',
        description: '–ú–æ–∂–Ω–æ –±–µ–∑ —Å–ª–æ–≤ ‚Äî –ø—Ä–æ—Å—Ç–æ –±—É–¥—å —Å–æ –º–Ω–æ–π'
    },
    'ready_to_support': { 
        name: '¬´–Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã —Å–ª—É—à–∞—Ç—å —Ç–µ–±—è¬ª', 
        emoji: 'ü§≤', 
        color: '#48bb78',
        description: '–ì–æ—Ç–æ–≤(–∞) –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∏ –ø–æ–Ω—è—Ç—å'
    },
    'deep_conversation': { 
        name: '¬´–ì–æ—Ç–æ–≤(–∞) –≥–æ–≤–æ—Ä–∏—Ç—å —á–µ—Å—Ç–Ω–æ ‚Äî –æ —Ç–æ–º, —á—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤–∞–∂–Ω–æ¬ª', 
        emoji: 'üî•', 
        color: '#9B59B6',
        description: '–ò—Å–∫—Ä–µ–Ω–Ω–∏–π —Ä–∞–∑–≥–æ–≤–æ—Ä –ø–æ –¥—É—à–∞–º'
    },
    'creative_flow': { 
        name: '¬´–•–æ—á—É —Ç–≤–æ—Ä–∏—Ç—å –∏ –¥–µ–ª–∏—Ç—å—Å—è –∏–¥–µ—è–º–∏¬ª', 
        emoji: 'üé®', 
        color: '#FF6B6B',
        description: '–û–±—Å—É–¥–∏–º –∏—Å–∫—É—Å—Å—Ç–≤–æ, –ø—Ä–æ–µ–∫—Ç—ã –∏ –º–µ—á—Ç—ã'
    }
};

// –ò–¥–µ–∞–ª—å–Ω—ã–µ –ø–∞—Ä—ã –¥–ª—è matching
const idealMatches = {
    'need_heard': ['ready_to_support', 'quiet_presence'],
    'ready_to_support': ['need_heard', 'deep_conversation'],
    'deep_conversation': ['ready_to_support', 'deep_conversation'],
    'light_talk': ['light_talk', 'creative_flow'],
    'quiet_presence': ['quiet_presence', 'ready_to_support'],
    'creative_flow': ['creative_flow', 'light_talk']
};

// –°–∏—Å—Ç–µ–º–∞ —É—Ä–æ–≤–Ω–µ–π
const levelSystem = {
    getLevel: (xp) => {
        const level = Math.floor(xp / 1000) + 1;
        const progress = (xp % 1000) / 10;
        return { level, progress, xp };
    },
    
    getLevelInfo: (level) => {
        const levels = {
            1: { name: '–ù–æ–≤–∏—á–æ–∫', color: '#95A5A6', perks: [] },
            10: { name: '–°–ª—É—à–∞—Ç–µ–ª—å', color: '#3498DB', perks: ['–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤ –ø–æ–∏—Å–∫–µ'] },
            30: { name: '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π', color: '#2ECC71', perks: ['–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏'] },
            50: { name: '–≠–º–ø–∞—Ç', color: '#9B59B6', perks: ['–ú–µ–Ω—Ç–æ—Ä—Å–∫–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏'] },
            80: { name: '–ú–∞—Å—Ç–µ—Ä –æ–±—â–µ–Ω–∏—è', color: '#E74C3C', perks: ['–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —Ñ–∏—á–∏'] }
        };
        
        for (let i = level; i >= 1; i--) {
            if (levels[i]) return levels[i];
        }
        return levels[1];
    }
};

// PWA —Ñ–∞–π–ª—ã
const pwaFiles = {
    '/manifest.json': `{
        "name": "Blizhe - –û—Å–æ–∑–Ω–∞–Ω–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ",
        "short_name": "Blizhe", 
        "description": "–ù–∞–π–¥–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –¥–ª—è –æ—Å–º—ã—Å–ª–µ–Ω–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞",
        "start_url": "/",
        "display": "standalone",
        "background_color": "#667eea",
        "theme_color": "#667eea",
        "orientation": "any",
        "icons": [
            {
                "src": "/icon-192.png",
                "sizes": "192x192",
                "type": "image/png"
            },
            {
                "src": "/icon-512.png", 
                "sizes": "512x512",
                "type": "image/png"
            }
        ],
        "categories": ["social", "entertainment"]
    }`
};

// –ú–∞—Ä—à—Ä—É—Ç—ã
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

app.get('/manifest.json', (req, res) => {
    res.setHeader('Content-Type', 'application/json');
    res.send(pwaFiles['/manifest.json']);
});

app.get('/icon-192.png', (req, res) => {
    res.setHeader('Content-Type', 'image/svg+xml');
    const svgIcon = `
        <svg width="192" height="192" xmlns="http://www.w3.org/2000/svg">
            <defs>
                <linearGradient id="grad" x1="0%" y1="0%" x2="100%" y2="100%">
                    <stop offset="0%" stop-color="#667eea"/>
                    <stop offset="100%" stop-color="#764ba2"/>
                </linearGradient>
            </defs>
            <rect width="100%" height="100%" fill="url(#grad)" rx="20"/>
            <text x="50%" y="50%" font-family="Arial" font-size="80" fill="white" text-anchor="middle" dy=".3em" font-weight="bold">B</text>
        </svg>
    `;
    res.send(svgIcon);
});

app.get('/icon-512.png', (req, res) => {
    res.setHeader('Content-Type', 'image/svg+xml');
    const svgIcon = `
        <svg width="512" height="512" xmlns="http://www.w3.org/2000/svg">
            <defs>
                <linearGradient id="grad" x1="0%" y1="0%" x2="100%" y2="100%">
                    <stop offset="0%" stop-color="#667eea"/>
                    <stop offset="100%" stop-color="#764ba2"/>
                </linearGradient>
            </defs>
            <rect width="100%" height="100%" fill="url(#grad)" rx="50"/>
            <text x="50%" y="50%" font-family="Arial" font-size="200" fill="white" text-anchor="middle" dy=".3em" font-weight="bold">B</text>
        </svg>
    `;
    res.send(svgIcon);
});

// API endpoints
app.get('/api/stats', (req, res) => {
    res.json({
        online: users.size,
        waiting: waitingUsers.size,
        activeRooms: rooms.size,
        moods: Object.keys(moods).length,
        version: '3.0.0'
    });
});

app.get('/api/cities', (req, res) => {
    res.json(popularCities);
});

app.get('/health', (req, res) => {
    res.json({ 
        status: 'OK', 
        timestamp: new Date().toISOString(),
        users: users.size,
        rooms: rooms.size
    });
});

// –§—É–Ω–∫—Ü–∏—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ñ–æ—Ç–æ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ä–∞–∑–º–µ—Ä–∞
const verifyPhoto = async (photoData, userData) => {
    return new Promise((resolve) => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–æ—Ç–æ
        const base64Length = photoData.length - (photoData.indexOf(',') + 1);
        const padding = photoData.endsWith('==') ? 2 : photoData.endsWith('=') ? 1 : 0;
        const fileSizeInBytes = (base64Length * 3) / 4 - padding;
        const fileSizeInMB = fileSizeInBytes / (1024 * 1024);

        console.log(`üìè –†–∞–∑–º–µ—Ä —Ñ–æ—Ç–æ: ${fileSizeInMB.toFixed(2)}MB`);

        if (fileSizeInMB > 10) {
            resolve({
                verified: false,
                trustScore: 0,
                flags: ['file_too_large'],
                message: '–§–æ—Ç–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ (–º–∞–∫—Å–∏–º—É–º 10MB)'
            });
            return;
        }

        setTimeout(() => {
            const isVerified = Math.random() > 0.1;
            resolve({
                verified: isVerified,
                trustScore: isVerified ? 75 : 0,
                flags: isVerified ? [] : ['suspicious_photo'],
                message: isVerified ? '–§–æ—Ç–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ' : '–§–æ—Ç–æ –Ω–µ –ø—Ä–æ—à–ª–æ –ø—Ä–æ–≤–µ—Ä–∫—É'
            });
        }, 1500);
    });
};

// Socket.IO —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
io.on('connection', (socket) => {
    console.log('üü¢ –ù–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ:', socket.id);

    socket.emit('stats_update', {
        online: users.size,
        waiting: waitingUsers.size,
        activeRooms: rooms.size
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    socket.emit('cities_list', popularCities);

    socket.on('user_register', async (userData) => {
        try {
            console.log('üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userData.name);
            
            if (userData.age < 18) {
                socket.emit('registration_error', { message: '–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç 18 –ª–µ—Ç' });
                return;
            }

            if (!['male', 'female'].includes(userData.gender)) {
                socket.emit('registration_error', { message: '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª' });
                return;
            }

            if (!userData.city || userData.city.trim() === '') {
                socket.emit('registration_error', { message: '–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥' });
                return;
            }

            if (!userData.photo) {
                socket.emit('registration_error', { message: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ' });
                return;
            }

            console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é —Ñ–æ—Ç–æ...');
            const verification = await verifyPhoto(userData.photo, userData);
            
            if (!verification.verified) {
                console.log('‚ùå –§–æ—Ç–æ –Ω–µ –ø—Ä–æ—à–ª–æ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é:', verification.message);
                socket.emit('photo_verification_failed', verification);
                return;
            }

            console.log('‚úÖ –§–æ—Ç–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ');

            const user = {
                id: socket.id,
                name: userData.name,
                age: userData.age,
                gender: userData.gender,
                city: userData.city,
                photo: userData.photo,
                trustScore: verification.trustScore,
                level: 1,
                xp: 0,
                coins: 100,
                joinedAt: new Date(),
                socket: socket,
                isVerified: true
            };

            users.set(socket.id, user);
            userSessions.set(socket.id, {
                user: user,
                currentMood: null,
                inRoom: false
            });

            console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:', user.name);
            
            socket.emit('registration_success', {
                user: {
                    id: user.id,
                    name: user.name,
                    age: user.age,
                    gender: user.gender,
                    city: user.city,
                    level: user.level,
                    xp: user.xp,
                    coins: user.coins,
                    trustScore: user.trustScore,
                    photo: user.photo
                },
                message: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!'
            });

            io.emit('stats_update', {
                online: users.size,
                waiting: waitingUsers.size,
                activeRooms: rooms.size
            });

            console.log(`üë§ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.name} (${user.age}, ${user.gender}, ${user.city})`);

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
            socket.emit('registration_error', { message: '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ' + error.message });
        }
    });

    socket.on('update_profile', async (profileData) => {
        const session = userSessions.get(socket.id);
        if (!session) return;

        try {
            if (profileData.name) session.user.name = profileData.name;
            if (profileData.age) session.user.age = profileData.age;
            if (profileData.gender) session.user.gender = profileData.gender;
            if (profileData.city) session.user.city = profileData.city;

            if (profileData.photo) {
                const verification = await verifyPhoto(profileData.photo, profileData);
                if (!verification.verified) {
                    socket.emit('photo_verification_failed', verification);
                    return;
                }
                session.user.photo = profileData.photo;
            }

            socket.emit('profile_updated', {
                user: {
                    id: session.user.id,
                    name: session.user.name,
                    age: session.user.age,
                    gender: session.user.gender,
                    city: session.user.city,
                    level: session.user.level,
                    xp: session.user.xp,
                    coins: session.user.coins,
                    trustScore: session.user.trustScore,
                    photo: session.user.photo
                },
                message: '–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω'
            });

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error);
            socket.emit('profile_error', { message: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è' });
        }
    });

    socket.on('get_user_data', () => {
        const session = userSessions.get(socket.id);
        if (session && session.user) {
            socket.emit('user_data', {
                user: {
                    id: session.user.id,
                    name: session.user.name,
                    age: session.user.age,
                    gender: session.user.gender,
                    city: session.user.city,
                    level: session.user.level,
                    xp: session.user.xp,
                    coins: session.user.coins,
                    trustScore: session.user.trustScore,
                    photo: session.user.photo
                }
            });
        }
    });

    socket.on('user_join', (data) => {
        const session = userSessions.get(socket.id);
        if (!session || !session.user.isVerified) {
            socket.emit('join_error', { message: '–°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é' });
            return;
        }

        session.currentMood = data.mood;
        session.user.currentMood = data.mood;

        findCompanion(session.user);

        socket.emit('waiting_start', {
            message: `–ò—â–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞: "${moods[data.mood].description}"`,
            mood: data.mood,
            position: waitingUsers.size
        });
    });

    socket.on('send_message', (data) => {
        const session = userSessions.get(socket.id);
        if (!session || !session.inRoom) return;

        const room = rooms.get(session.user.roomId);
        if (!room) return;

        const companionId = room.user1 === socket.id ? room.user2 : room.user1;
        const companion = users.get(companionId);

        io.to(companionId).emit('receive_message', {
            from: session.user.name,
            text: data.text,
            timestamp: new Date().toLocaleTimeString(),
            level: session.user.level
        });

        console.log(`üí¨ ${session.user.name} -> ${companion.name}: ${data.text}`);
    });

    socket.on('typing_start', () => {
        const session = userSessions.get(socket.id);
        if (!session || !session.inRoom) return;

        const room = rooms.get(session.user.roomId);
        if (!room) return;

        const companionId = room.user1 === socket.id ? room.user2 : room.user1;
        io.to(companionId).emit('companion_typing', true);
    });

    socket.on('typing_stop', () => {
        const session = userSessions.get(socket.id);
        if (!session || !session.inRoom) return;

        const room = rooms.get(session.user.roomId);
        if (!room) return;

        const companionId = room.user1 === socket.id ? room.user2 : room.user1;
        io.to(companionId).emit('companion_typing', false);
    });

    socket.on('rate_conversation', (data) => {
        const session = userSessions.get(socket.id);
        if (!session) return;

        session.user.xp += data.rating * 25;
        session.user.coins += data.rating * 10;

        const newLevel = levelSystem.getLevel(session.user.xp);
        if (newLevel.level > session.user.level) {
            session.user.level = newLevel.level;
            socket.emit('level_up', {
                level: newLevel.level,
                levelInfo: levelSystem.getLevelInfo(newLevel.level)
            });
        }

        socket.emit('xp_update', {
            xp: session.user.xp,
            coins: session.user.coins,
            level: session.user.level
        });
    });

    socket.on('leave_chat', () => {
        leaveChat(socket.id);
    });

    socket.on('disconnect', () => {
        console.log('üî¥ –û—Ç–∫–ª—é—á–µ–Ω–∏–µ:', socket.id);
        leaveChat(socket.id);
        
        io.emit('stats_update', {
            online: users.size,
            waiting: waitingUsers.size,
            activeRooms: rooms.size
        });
    });
});

function findCompanion(user) {
    // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –∏–¥–µ–∞–ª—å–Ω—ã–µ –ø–∞—Ä—ã
    const idealCompanions = idealMatches[user.currentMood];
    for (let [waitingId, waitingUser] of waitingUsers) {
        if (idealCompanions.includes(waitingUser.currentMood) && waitingUser.id !== user.id) {
            createRoom(waitingUser, user);
            waitingUsers.delete(waitingId);
            console.log(`üéØ –ù–∞–π–¥–µ–Ω –∏–¥–µ–∞–ª—å–Ω—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫: ${waitingUser.name} + ${user.name}`);
            console.log(`üí´ –°–æ—á–µ—Ç–∞–Ω–∏–µ: ${moods[waitingUser.currentMood].name} + ${moods[user.currentMood].name}`);
            return;
        }
    }
    
    // –ó–∞—Ç–µ–º –∏—â–µ–º –ª—é–±–æ–≥–æ —Å —Ç–∞–∫–∏–º –∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ–º
    for (let [waitingId, waitingUser] of waitingUsers) {
        if (waitingUser.currentMood === user.currentMood && waitingUser.id !== user.id) {
            createRoom(waitingUser, user);
            waitingUsers.delete(waitingId);
            console.log(`ü§ù –ù–∞–π–¥–µ–Ω —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫: ${waitingUser.name} + ${user.name}`);
            return;
        }
    }
    
    waitingUsers.set(user.id, user);
    console.log(`‚è≥ ${user.name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å (${waitingUsers.size} –≤ –æ–∂–∏–¥–∞–Ω–∏–∏)`);
    console.log(`üé≠ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: ${moods[user.currentMood].name}`);
}

function createRoom(user1, user2) {
    const roomId = `room_${Date.now()}`;
    const room = {
        id: roomId,
        user1: user1.id,
        user2: user2.id,
        mood: user1.currentMood,
        createdAt: new Date(),
        users: [user1.name, user2.name]
    };
    
    rooms.set(roomId, room);
    
    user1.roomId = roomId;
    user2.roomId = roomId;
    
    const session1 = userSessions.get(user1.id);
    const session2 = userSessions.get(user2.id);
    session1.inRoom = true;
    session2.inRoom = true;
    
    user1.socket.emit('companion_found', {
        companionName: user2.name,
        companionAge: user2.age,
        companionGender: user2.gender,
        companionCity: user2.city,
        companionLevel: user2.level,
        mood: moods[user1.currentMood].name,
        moodDescription: moods[user1.currentMood].description,
        roomId: roomId
    });
    
    user2.socket.emit('companion_found', {
        companionName: user1.name,
        companionAge: user1.age,
        companionGender: user1.gender,
        companionCity: user1.city,
        companionLevel: user1.level,
        mood: moods[user2.currentMood].name,
        moodDescription: moods[user2.currentMood].description,
        roomId: roomId
    });
    
    console.log(`üöÄ –°–æ–∑–¥–∞–Ω–∞ –∫–æ–º–Ω–∞—Ç–∞ ${roomId} –¥–ª—è ${user1.name} –∏ ${user2.name}`);
    console.log(`üí¨ –¢–∏–ø –æ–±—â–µ–Ω–∏—è: ${moods[user1.currentMood].name}`);
}

function leaveChat(userId) {
    const session = userSessions.get(userId);
    if (!session) return;

    if (session.user.roomId) {
        const room = rooms.get(session.user.roomId);
        if (room) {
            const companionId = room.user1 === userId ? room.user2 : room.user1;
            const companionSession = userSessions.get(companionId);
            if (companionSession) {
                companionSession.user.socket.emit('companion_left');
                companionSession.inRoom = false;
                findCompanion(companionSession.user);
            }
            rooms.delete(session.user.roomId);
        }
    }

    waitingUsers.delete(userId);
    if (session) {
        session.inRoom = false;
        session.user.roomId = null;
    }
}

const PORT = process.env.PORT || 3000;
server.listen(PORT, () => {
    console.log(`
üöÄ Blizhe 3.0 –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}
üí´ –û—Å–æ–∑–Ω–∞–Ω–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ | üé≠ 6 —Ç–∏–ø–æ–≤ –¥–∏–∞–ª–æ–≥–æ–≤
üì∏ –§–æ—Ç–æ –¥–æ 10MB | üåç –í—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞
üë• –£–º–Ω—ã–π –ø–æ–¥–±–æ—Ä –ø–∞—Ä | üéÆ –°–∏—Å—Ç–µ–º–∞ —É—Ä–æ–≤–Ω–µ–π
üì± PWA –ø–æ–¥–¥–µ—Ä–∂–∫–∞ | üîí –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å
üåê Health: http://localhost:${PORT}/health

üéØ –ù–ê–°–¢–†–û–ï–ù–ò–Ø:
üó£Ô∏è  –Ø —Ö–æ—á—É –ø–æ–¥–µ–ª–∏—Ç—å—Å—è ‚Äî –±–µ–∑ —Å–æ–≤–µ—Ç–æ–≤ –∏ –æ—Ü–µ–Ω–æ–∫
‚òÄÔ∏è  –î–∞–≤–∞–π –ø–æ–≥–æ–≤–æ—Ä–∏–º –æ —á—ë–º-—Ç–æ —Å–≤–µ—Ç–ª–æ–º
üåô  –ú–Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–æ—Å—Ç–æ –∑–Ω–∞—Ç—å, —á—Ç–æ —Ç—ã —Ä—è–¥–æ–º
ü§≤  –Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã —Å–ª—É—à–∞—Ç—å —Ç–µ–±—è
üî•  –ì–æ—Ç–æ–≤(–∞) –≥–æ–≤–æ—Ä–∏—Ç—å —á–µ—Å—Ç–Ω–æ
üé®  –•–æ—á—É —Ç–≤–æ—Ä–∏—Ç—å –∏ –¥–µ–ª–∏—Ç—å—Å—è –∏–¥–µ—è–º–∏
    `);
});