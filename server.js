const express = require('express');
const http = require('http');
const socketIo = require('socket.io');
const path = require('path');

const app = express();
const server = http.createServer(app);

// –í–∞–∂–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ CORS –¥–ª—è Socket.IO
const io = socketIo(server, {
  cors: {
    origin: "*",
    methods: ["GET", "POST"]
  }
});

// Middleware
app.use(express.static('public'));
app.use(express.json({ limit: '10mb' }));

// –•—Ä–∞–Ω–∏–ª–∏—â–∞ (–≤—Ä–µ–º–µ–Ω–Ω—ã–µ - –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –ë–î)
const users = new Map();
const waitingUsers = new Map();
const rooms = new Map();
const userSessions = new Map();

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π
const moods = {
    'sad': { name: '–ì—Ä—É—Å—Ç–Ω–æ–µ', emoji: 'üò¢', color: '#4A90E2' },
    'happy': { name: '–†–∞–¥–æ—Å—Ç–Ω–æ–µ', emoji: 'üòä', color: '#FFD93D' },
    'anxious': { name: '–¢—Ä–µ–≤–æ–∂–Ω–æ–µ', emoji: 'üò∞', color: '#6BCF7F' },
    'advice': { name: '–°–æ–≤–µ—Ç', emoji: 'ü§î', color: '#A78BFA' },
    'chat': { name: '–í–µ—Å–µ–ª–æ–µ', emoji: 'üéâ', color: '#FF6B6B' },
    'thoughts': { name: '–§–∏–ª–æ—Å–æ—Ñ—Å–∫–æ–µ', emoji: 'üí≠', color: '#667eea' },
    'angry': { name: '–ó–ª–æ–µ', emoji: 'üò†', color: '#FF8E53' },
    'love': { name: '–í–ª—é–±–ª–µ–Ω–Ω–æ–µ', emoji: 'üòç', color: '#FF6B9D' },
    'bored': { name: '–°–∫—É—á–∞—é—â–µ–µ', emoji: 'ü•±', color: '#95E1D3' },
    'friends': { name: '–ü–æ–∏—Å–∫ –¥—Ä—É–∑–µ–π', emoji: 'üë´', color: '#4ECDC4' },
    'relationship': { name: '–ü–æ–∏—Å–∫ –æ—Ç–Ω–æ—à–µ–Ω–∏–π', emoji: 'üíï', color: '#FF9A8B' },
    'neutral': { name: '–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ', emoji: 'üòê', color: '#95A5A6' }
};

// –°–∏—Å—Ç–µ–º–∞ —É—Ä–æ–≤–Ω–µ–π
const levelSystem = {
    getLevel: (xp) => {
        const level = Math.floor(xp / 1000) + 1;
        const progress = (xp % 1000) / 10;
        return { level, progress, xp };
    },
    
    getLevelInfo: (level) => {
        const levels = {
            1: { name: '–ù–æ–≤–∏—á–æ–∫', color: '#95A5A6', perks: [] },
            10: { name: '–°–ª—É—à–∞—Ç–µ–ª—å', color: '#3498DB', perks: ['–î–æ—Å—Ç—É–ø –∫ –≥—Ä—É–ø–ø–∞–º'] },
            30: { name: '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π', color: '#2ECC71', perks: ['–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∫–≤–µ—Å—Ç—ã'] },
            50: { name: '–≠–º–ø–∞—Ç', color: '#9B59B6', perks: ['–ú–µ–Ω—Ç–æ—Ä—Å–∫–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏'] },
            80: { name: '–ú–∞—Å—Ç–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π', color: '#E74C3C', perks: ['–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —Ñ–∏—á–∏'] }
        };
        
        for (let i = level; i >= 1; i--) {
            if (levels[i]) return levels[i];
        }
        return levels[1];
    }
};

// PWA —Ñ–∞–π–ª—ã
const pwaFiles = {
    '/manifest.json': `{
        "name": "Blizhe",
        "short_name": "Blizhe", 
        "description": "–ù–∞–π–¥–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –ø–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é",
        "start_url": "/",
        "display": "standalone",
        "background_color": "#667eea",
        "theme_color": "#667eea",
        "orientation": "portrait",
        "icons": [
            {
                "src": "/icon-192.png",
                "sizes": "192x192",
                "type": "image/png"
            },
            {
                "src": "/icon-512.png", 
                "sizes": "512x512",
                "type": "image/png"
            }
        ],
        "categories": ["social", "entertainment"]
    }`
};

// –ú–∞—Ä—à—Ä—É—Ç—ã
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

app.get('/manifest.json', (req, res) => {
    res.setHeader('Content-Type', 'application/json');
    res.send(pwaFiles['/manifest.json']);
});

app.get('/icon-192.png', (req, res) => {
    res.setHeader('Content-Type', 'image/svg+xml');
    const svgIcon = `
        <svg width="192" height="192" xmlns="http://www.w3.org/2000/svg">
            <defs>
                <linearGradient id="grad" x1="0%" y1="0%" x2="100%" y2="100%">
                    <stop offset="0%" stop-color="#667eea"/>
                    <stop offset="100%" stop-color="#764ba2"/>
                </linearGradient>
            </defs>
            <rect width="100%" height="100%" fill="url(#grad)" rx="20"/>
            <text x="50%" y="50%" font-family="Arial" font-size="80" fill="white" text-anchor="middle" dy=".3em" font-weight="bold">B</text>
        </svg>
    `;
    res.send(svgIcon);
});

// API endpoints
app.get('/api/stats', (req, res) => {
    res.json({
        online: users.size,
        waiting: waitingUsers.size,
        activeRooms: rooms.size,
        moods: Object.keys(moods).length,
        version: '2.1.0'
    });
});

app.get('/health', (req, res) => {
    res.json({ 
        status: 'OK', 
        timestamp: new Date().toISOString(),
        users: users.size,
        rooms: rooms.size
    });
});

// –§—É–Ω–∫—Ü–∏—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ñ–æ—Ç–æ
const verifyPhoto = async (photoData, userData) => {
    return new Promise((resolve) => {
        setTimeout(() => {
            // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç AI –ø—Ä–æ–≤–µ—Ä–∫–∞
            const isVerified = Math.random() > 0.1; // 90% —É—Å–ø–µ—Ö
            resolve({
                verified: isVerified,
                trustScore: isVerified ? 75 : 0,
                flags: isVerified ? [] : ['suspicious_photo'],
                message: isVerified ? '–§–æ—Ç–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ' : '–§–æ—Ç–æ –Ω–µ –ø—Ä–æ—à–ª–æ –ø—Ä–æ–≤–µ—Ä–∫—É'
            });
        }, 1500);
    });
};

// Socket.IO —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
io.on('connection', (socket) => {
    console.log('üü¢ –ù–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ:', socket.id);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
    socket.emit('stats_update', {
        online: users.size,
        waiting: waitingUsers.size,
        activeRooms: rooms.size
    });

    socket.on('user_register', async (userData) => {
        try {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞
            if (userData.age < 18) {
                socket.emit('registration_error', { message: '–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç 18 –ª–µ—Ç' });
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–∞
            if (!['male', 'female'].includes(userData.gender)) {
                socket.emit('registration_error', { message: '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª' });
                return;
            }

            // –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —Ñ–æ—Ç–æ
            const verification = await verifyPhoto(userData.photo, userData);
            
            if (!verification.verified) {
                socket.emit('photo_verification_failed', verification);
                return;
            }

            // –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const user = {
                id: socket.id,
                name: userData.name,
                age: userData.age,
                gender: userData.gender,
                photo: userData.photo,
                trustScore: verification.trustScore,
                level: 1,
                xp: 0,
                coins: 100, // –ù–∞—á–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å
                joinedAt: new Date(),
                socket: socket,
                isVerified: true
            };

            users.set(socket.id, user);
            userSessions.set(socket.id, {
                user: user,
                currentMood: null,
                inRoom: false
            });

            socket.emit('registration_success', {
                user: {
                    id: user.id,
                    name: user.name,
                    age: user.age,
                    gender: user.gender,
                    level: user.level,
                    xp: user.xp,
                    coins: user.coins,
                    trustScore: user.trustScore
                },
                message: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!'
            });

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –≤—Å–µ—Ö
            io.emit('stats_update', {
                online: users.size,
                waiting: waitingUsers.size,
                activeRooms: rooms.size
            });

            console.log(`üë§ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.name} (${user.age}, ${user.gender})`);

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
            socket.emit('registration_error', { message: '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏' });
        }
    });

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
    socket.on('update_profile', (profileData) => {
        const session = userSessions.get(socket.id);
        if (!session) return;

        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        if (profileData.name) session.user.name = profileData.name;
        if (profileData.age) session.user.age = profileData.age;
        if (profileData.gender) session.user.gender = profileData.gender;

        socket.emit('profile_updated', {
            user: {
                id: session.user.id,
                name: session.user.name,
                age: session.user.age,
                gender: session.user.gender,
                level: session.user.level,
                xp: session.user.xp,
                coins: session.user.coins,
                trustScore: session.user.trustScore
            },
            message: '–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω'
        });
    });

    socket.on('user_join', (data) => {
        const session = userSessions.get(socket.id);
        if (!session || !session.user.isVerified) {
            socket.emit('join_error', { message: '–°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é' });
            return;
        }

        session.currentMood = data.mood;
        session.user.currentMood = data.mood;

        // –ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
        findCompanion(session.user);

        socket.emit('waiting_start', {
            message: `–ò—â–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ —Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ–º: "${moods[data.mood].name}"`,
            mood: data.mood,
            position: waitingUsers.size
        });
    });

    socket.on('send_message', (data) => {
        const session = userSessions.get(socket.id);
        if (!session || !session.inRoom) return;

        const room = rooms.get(session.user.roomId);
        if (!room) return;

        const companionId = room.user1 === socket.id ? room.user2 : room.user1;
        const companion = users.get(companionId);

        io.to(companionId).emit('receive_message', {
            from: session.user.name,
            text: data.text,
            timestamp: new Date().toLocaleTimeString(),
            level: session.user.level
        });

        console.log(`üí¨ ${session.user.name} -> ${companion.name}: ${data.text}`);
    });

    socket.on('typing_start', () => {
        const session = userSessions.get(socket.id);
        if (!session || !session.inRoom) return;

        const room = rooms.get(session.user.roomId);
        if (!room) return;

        const companionId = room.user1 === socket.id ? room.user2 : room.user1;
        io.to(companionId).emit('companion_typing', true);
    });

    socket.on('typing_stop', () => {
        const session = userSessions.get(socket.id);
        if (!session || !session.inRoom) return;

        const room = rooms.get(session.user.roomId);
        if (!room) return;

        const companionId = room.user1 === socket.id ? room.user2 : room.user1;
        io.to(companionId).emit('companion_typing', false);
    });

    socket.on('rate_conversation', (data) => {
        const session = userSessions.get(socket.id);
        if (!session) return;

        // –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –æ–ø—ã—Ç–∞ –∏ –º–æ–Ω–µ—Ç
        session.user.xp += data.rating * 25;
        session.user.coins += data.rating * 10;

        const newLevel = levelSystem.getLevel(session.user.xp);
        if (newLevel.level > session.user.level) {
            session.user.level = newLevel.level;
            socket.emit('level_up', {
                level: newLevel.level,
                levelInfo: levelSystem.getLevelInfo(newLevel.level)
            });
        }

        socket.emit('xp_update', {
            xp: session.user.xp,
            coins: session.user.coins,
            level: session.user.level
        });
    });

    socket.on('leave_chat', () => {
        leaveChat(socket.id);
    });

    socket.on('disconnect', () => {
        console.log('üî¥ –û—Ç–∫–ª—é—á–µ–Ω–∏–µ:', socket.id);
        leaveChat(socket.id);
        
        io.emit('stats_update', {
            online: users.size,
            waiting: waitingUsers.size,
            activeRooms: rooms.size
        });
    });
});

// –ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
function findCompanion(user) {
    // –ò—â–µ–º –ø–æ —Ç–∞–∫–æ–º—É –∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é
    for (let [waitingId, waitingUser] of waitingUsers) {
        if (waitingUser.currentMood === user.currentMood && waitingUser.id !== user.id) {
            createRoom(waitingUser, user);
            waitingUsers.delete(waitingId);
            console.log(`üéØ –ù–∞–π–¥–µ–Ω —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫: ${waitingUser.name} + ${user.name}`);
            return;
        }
    }
    
    // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ - –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ–∂–∏–¥–∞–Ω–∏–µ
    waitingUsers.set(user.id, user);
    console.log(`‚è≥ ${user.name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å (${waitingUsers.size} –≤ –æ–∂–∏–¥–∞–Ω–∏–∏)`);
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
function createRoom(user1, user2) {
    const roomId = `room_${Date.now()}`;
    const room = {
        id: roomId,
        user1: user1.id,
        user2: user2.id,
        mood: user1.currentMood,
        createdAt: new Date(),
        users: [user1.name, user2.name]
    };
    
    rooms.set(roomId, room);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    user1.roomId = roomId;
    user2.roomId = roomId;
    
    const session1 = userSessions.get(user1.id);
    const session2 = userSessions.get(user2.id);
    session1.inRoom = true;
    session2.inRoom = true;
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏
    user1.socket.emit('companion_found', {
        companionName: user2.name,
        companionAge: user2.age,
        companionGender: user2.gender,
        companionLevel: user2.level,
        mood: moods[user1.currentMood].name,
        roomId: roomId
    });
    
    user2.socket.emit('companion_found', {
        companionName: user1.name,
        companionAge: user1.age,
        companionGender: user1.gender,
        companionLevel: user1.level,
        mood: moods[user2.currentMood].name,
        roomId: roomId
    });
    
    console.log(`üöÄ –°–æ–∑–¥–∞–Ω–∞ –∫–æ–º–Ω–∞—Ç–∞ ${roomId} –¥–ª—è ${user1.name} –∏ ${user2.name}`);
}

// –í—ã—Ö–æ–¥ –∏–∑ —á–∞—Ç–∞
function leaveChat(userId) {
    const session = userSessions.get(userId);
    if (!session) return;

    if (session.user.roomId) {
        const room = rooms.get(session.user.roomId);
        if (room) {
            // –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
            const companionId = room.user1 === userId ? room.user2 : room.user1;
            const companionSession = userSessions.get(companionId);
            if (companionSession) {
                companionSession.user.socket.emit('companion_left');
                companionSession.inRoom = false;
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –≤ –ø–æ–∏—Å–∫
                findCompanion(companionSession.user);
            }
            rooms.delete(session.user.roomId);
        }
    }

    waitingUsers.delete(userId);
    if (session) {
        session.inRoom = false;
        session.user.roomId = null;
    }
}

const PORT = process.env.PORT || 3000;
server.listen(PORT, () => {
    console.log(`
üöÄ Blizhe 2.1 –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}
üì∏ –°–∏—Å—Ç–µ–º–∞ —Ñ–æ—Ç–æ-–≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
üéÆ –ò–≥—Ä–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ —É—Ä–æ–≤–Ω–µ–π
üë• –ü–æ–∏—Å–∫ –ø–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è–º
üì± PWA –ø–æ–¥–¥–µ—Ä–∂–∫–∞
üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
üåê Health: http://localhost:${PORT}/health
    `);
});

// Graceful shutdown
process.on('SIGTERM', () => {
    console.log('üõë –ü–æ–ª—É—á–µ–Ω SIGTERM, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...');
    server.close(() => {
        console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        process.exit(0);
    });
});